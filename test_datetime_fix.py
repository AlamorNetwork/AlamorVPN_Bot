#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ØªØ³Øª ØªØ§Ø¨Ø¹ calculate_days_remaining
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from utils import helpers
from datetime import datetime, timedelta

def test_calculate_days_remaining():
    """ØªØ³Øª ØªØ§Ø¨Ø¹ Ù…Ø­Ø§Ø³Ø¨Ù‡ Ø±ÙˆØ²Ù‡Ø§ÛŒ Ø¨Ø§Ù‚ÛŒâ€ŒÙ…Ø§Ù†Ø¯Ù‡"""
    print("=== ØªØ³Øª ØªØ§Ø¨Ø¹ calculate_days_remaining ===")
    
    # ØªØ³Øª 1: ØªØ§Ø±ÛŒØ® Ø¢ÛŒÙ†Ø¯Ù‡
    future_date = datetime.now() + timedelta(days=5)
    result = helpers.calculate_days_remaining(future_date)
    print(f"ØªØ§Ø±ÛŒØ® Ø¢ÛŒÙ†Ø¯Ù‡ (5 Ø±ÙˆØ²): {result} Ø±ÙˆØ² Ø¨Ø§Ù‚ÛŒâ€ŒÙ…Ø§Ù†Ø¯Ù‡")
    
    # ØªØ³Øª 2: ØªØ§Ø±ÛŒØ® Ú¯Ø°Ø´ØªÙ‡
    past_date = datetime.now() - timedelta(days=3)
    result = helpers.calculate_days_remaining(past_date)
    print(f"ØªØ§Ø±ÛŒØ® Ú¯Ø°Ø´ØªÙ‡ (3 Ø±ÙˆØ²): {result} Ø±ÙˆØ² Ø¨Ø§Ù‚ÛŒâ€ŒÙ…Ø§Ù†Ø¯Ù‡")
    
    # ØªØ³Øª 3: ØªØ§Ø±ÛŒØ® Ø§Ù…Ø±ÙˆØ²
    today = datetime.now()
    result = helpers.calculate_days_remaining(today)
    print(f"ØªØ§Ø±ÛŒØ® Ø§Ù…Ø±ÙˆØ²: {result} Ø±ÙˆØ² Ø¨Ø§Ù‚ÛŒâ€ŒÙ…Ø§Ù†Ø¯Ù‡")
    
    # ØªØ³Øª 4: Ø±Ø´ØªÙ‡ ØªØ§Ø±ÛŒØ®
    date_str = (datetime.now() + timedelta(days=10)).strftime('%Y-%m-%d %H:%M:%S')
    result = helpers.calculate_days_remaining(date_str)
    print(f"Ø±Ø´ØªÙ‡ ØªØ§Ø±ÛŒØ® (10 Ø±ÙˆØ²): {result} Ø±ÙˆØ² Ø¨Ø§Ù‚ÛŒâ€ŒÙ…Ø§Ù†Ø¯Ù‡")
    
    # ØªØ³Øª 5: None
    result = helpers.calculate_days_remaining(None)
    print(f"None: {result}")
    
    # ØªØ³Øª 6: ØªØ§Ø±ÛŒØ® Ø¨Ø§ timezone (Ø§Ú¯Ø± pytz Ù…ÙˆØ¬ÙˆØ¯ Ø¨Ø§Ø´Ø¯)
    try:
        import pytz
        tz = pytz.timezone('UTC')
        tz_date = datetime.now(tz)
        result = helpers.calculate_days_remaining(tz_date)
        print(f"ØªØ§Ø±ÛŒØ® Ø¨Ø§ timezone: {result} Ø±ÙˆØ² Ø¨Ø§Ù‚ÛŒâ€ŒÙ…Ø§Ù†Ø¯Ù‡")
    except ImportError:
        print("pytz Ù…ÙˆØ¬ÙˆØ¯ Ù†ÛŒØ³ØªØŒ ØªØ³Øª timezone Ø±Ø¯ Ø´Ø¯")

def test_traffic_formatting():
    """ØªØ³Øª ØªØ§Ø¨Ø¹ ØªØ¨Ø¯ÛŒÙ„ Ø­Ø¬Ù…"""
    print("\n=== ØªØ³Øª ØªØ§Ø¨Ø¹ format_traffic_size ===")
    
    test_cases = [
        0,
        1024,
        1024 * 1024,
        1024 * 1024 * 1024,
        1024 * 1024 * 1024 * 2.5,
        None
    ]
    
    for value in test_cases:
        formatted = helpers.format_traffic_size(value)
        print(f"{value} -> {formatted}")

if __name__ == "__main__":
    print("ðŸš€ Ø´Ø±ÙˆØ¹ ØªØ³Øª ØªÙˆØ§Ø¨Ø¹ helpers\n")
    
    test_calculate_days_remaining()
    test_traffic_formatting()
    
    print("\nâœ… ØªØ³Øªâ€ŒÙ‡Ø§ Ú©Ø§Ù…Ù„ Ø´Ø¯!")
